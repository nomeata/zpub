<?xml version="1.0"  encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[ 
	<!ENTITY zpub "<application>zpub</application>">
	<!ENTITY cust "demo">
]>
<article lang="de">
  <title>zpub – Zentrales Publikationssystem</title>
  <subtitle>Technische Dokumentation</subtitle>

  <articleinfo>
    <title>zpub – Zentrales Publikationssystem</title>
    <subtitle>Technische Dokumentation</subtitle>

    <authorgroup>
      <author>
        <firstname>Joachim</firstname><surname>Breitner</surname>
      </author>
      <author>
        <firstname>Thomas</firstname><surname>Breitner</surname>
      </author>
    </authorgroup>

    <pubdate>2009</pubdate>

    <copyright>
      <year>2009</year>
    </copyright>

    <releaseinfo>$Id$</releaseinfo>

  </articleinfo>

  <section>
    <title>Versionshistorie</title>

    <section>
      <title>Version 0.5.1</title>
      <para>Unveröffentlicht</para>
      <itemizedlist>
	<listitem><para>
	  Bugfix: Die Datei <filename>/opt/zpub/&cust;/cache/documents</filename>
	  spiegelt jetzt stets den neusten Revisionsstand wieder; nicht den der
          zuletzt gebauten Dokumentrevision (welcher älter sein kann).
	</para></listitem>
	<listitem><para>
          In der Datei <filename>/opt/zpub/&cust;/conf/logo.png</filename> kann ein Logo hinterlegt werden. (Dazu muss die Apache-Konfiguration angepasst werden.)
	</para></listitem>
	<listitem><para>
	  Bugfix: Dateien, die im Grundverzeichnis des SVN-Repositories
	  angelegt werden, stoßen keine Dokumenten-Bau-Jobs an.
	</para></listitem>
	<listitem><para>
	  Es gibt jetzt eine Testsuite für zpub.
	</para></listitem>
      </itemizedlist>
    </section>
      
    <section>
      <title>Version 0.5</title>
      <para>7.11.2012</para>
      <itemizedlist>
	<listitem><para>
	  Dokumente, die nicht mehr im Subversion-Repository liegen, werden auch nicht mehr in der Web-Oberfläche angezeigt.
	</para></listitem>
	<listitem><para>
	  Die &zpub;-Dokumentation wird jetzt mit installiert und kann mit
	  <command>zpub-update-docs.sh</command> in eine Instanz eingefügt bzw.
	  darin aktualisiert werden. Dabei wird in der Dokumentations der zur
	  Instanz gehörende Instanz- und Hostname eingefügt.
	</para></listitem>
	<listitem><para>
	  Diese Versionshistorie.
	</para></listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 0.4</title>
      <para>Veröffentlicht am 10.2.2012</para>
      <itemizedlist>
	<listitem><para>
	  Ab dieser Version kann man auch mehrere zpub-Instanzen auf dem selben virtuellen Host unterbringen, da eine Instanz auch in einem Unterverzeichnis des URL-Adressraumes eingerichtet werden kann.
	</para></listitem>
	<listitem><para>
	  Es können mehere Ausgabevarianten („styles“) gleichzeitig konfiguriert werden.
	</para></listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 0.3</title>
      <para>Veröffentlicht am 2.1.2012</para>
      <itemizedlist>
	<listitem><para>
	  Das Ausgabeformat epub für mobile Lesegeräte wird unterstützt.
	</para></listitem>
	<listitem><para>
	  Die aktuelle Version der zpub-Installation wird im Web-Interface angezeigt.
	</para></listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Version 0.2</title>
      <para>Veröffentlicht am 6.12.2010</para>
      <itemizedlist>
	<listitem><para>
	  Es gibt jetzt ein Installationsskript und eine Paketierung für Debian- und Ubuntu-Pakete.
	</para></listitem>
	<listitem><para>
	  Die generierten Ausgabeformate sind jetzt konfigurierbar.
	</para></listitem>
	<listitem><para>
	  Ein Backup der gesamten Dokumentquellen samt Historie kann über das Web-Interface heruntergeladen werden.
	</para></listitem>
      </itemizedlist>
    </section>

  </section>

  <section>    
	<title>Systemvoraussetzungen</title>
    <para>
      &zpub; ist, technisch gesehen, eine Sammlung von Bash- und
      Perl-Skripten, die im Zusammenspiel mit
      <application>apache2</application> und
      <application>subversion</application> die erwartete Funktionalität
      bereitstellen. Dazu müssen folgende Pakete eines Debian-Systems, Release
      “Lenny”, installiert sein:
    </para>
    <simplelist type="horiz" columns="4">
      <member><package>apache2</package></member>
      <member><package>cabextract</package></member>
      <member><package>docbook-xsl</package></member>
      <member><package>fop</package></member>
      <member><package>libapache2-svn</package></member>
      <member><package>libdatetime-perl</package></member>
      <member><package>libdatetime-format-strptime-perl-perl</package></member>
      <member><package>libfile-slurp-perl</package></member>
      <member><package>libfilesys-df-perl</package></member>
      <member><package>libmime-lite-perl</package></member>
      <member><package>libsys-cpuload-perl</package></member>
      <member><package>libpaper1</package></member>
      <member><package>libsaxon-java</package></member>
      <member><package>libsvn-svnlook-perl</package></member>
      <member><package>libtemplate-perl</package></member>
      <member><package>libipc-run-perl</package></member>
      <member><package>subversion</package></member>
      <member><package>sun-java6-jre</package></member>
      <member><package>wine</package></member>
      <member><package>xsltproc</package></member>
      <member><package>zip</package></member>
    </simplelist>
    <para>
      Weiter muss für die Erstellung von Windows-Hilfedateien der
      <application>Microsoft HTML Help Workshop</application> installiert sein. Dazu
      führt man als der Systembenutzer, der später die Hilfedateien erstellen
      wird, folgende Befehle aus:
<screen>$ wget http://htmlhelp.googlecode.com/svn/trunk/misc/htmlhelp.sh
$ wget http://htmlhelp.googlecode.com/svn/trunk/misc/htmlhelp.reg
$ bash ./htmlreg.sh</screen>
    </para>
    <para>
      Für die korrekte Wortrennung von deutschen Texten muss von der Webseite
      <ulink url="http://sourceforge.net/projects/offo"><uri>http://sourceforge.net/projects/offo</uri></ulink>
      das Paket offo-hyphenation-fop-stable heruntergeladen und die darin
      enthaltene Datei <filename>fop-hyph.jar</filename> im Verzeichnis
      <filename>/opt/zpub/tools</filename> gespeichert werden.
    </para>

</section>

<section> <title>zpub - für Debian paketiert</title>


<para>zpub ist als Debian-Paket verfügbar, welches die Installation und Ersteinrichtung stark vereinfacht bzw. automatisiert. Ein Installationsskript für zpub-Instanzen (<code>zpub-create-instance</code>) ist ebenfalls vorhanden. </para>

<para>Einrichtung über das zpub-Debian-Paket: </para>
<orderedlist>
<listitem>
<para>Erweiterung der <code>/etc/apt/sources.list</code> um das private zpub-Repository:</para>
<screen>deb http://zpub.de/debian/ ./</screen>
</listitem>
<listitem>
<para><code>$ apt-get install zpub</code>:</para>
<itemizedlist>
<listitem>
<para>neuer Benutzer "zpub" wird erstellt und der Gruppe "<code>www-data</code>" hinzugefügt</para>
</listitem>
<listitem>
<para>ein vorhandener Apache-Webserver wird für zpub konfiguriert (ein neuer vhost wird erstellt)</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<screen>$ zpub-create-instance
Usage:

/usr/sbin/zpub-create-instance name 'Full Name' zpub.domain.com

where
 name:            Directory name of the instance in /var/lib/zpub
 'Full Name':     Name as shown in the web interface
 zpub.domain.com: Hostname for this virtual host

$ zpub-create-instance testzpublocal "test-zpub auf Localhost"  zpub.localhost
</screen>
<para>Die neue zpub-Instanz "<code>testzpublocal</code>" ist nun angelegt.</para>
<para>Weitere Schritte sind beispielsweise:</para>
<itemizedlist>
<listitem>
<para><code>style</code>-Verzeichnis anpassen bzw. eigene Stylesheets hinterlegen</para>
</listitem>
<listitem>
<para>via <code>htpasswd</code> neue zpub-Benutzer anlegen</para>
</listitem>
<listitem>
<para>zpub-admin Benutzer anlegen</para>
</listitem>
<listitem>
<para>eventuell <code>/etc/hosts</code> anpassen</para>
</listitem>
<listitem>
<para>Apache neu starten, um die neue zpub-Instanz zu erreichen</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>zpub ist über den Browser erreichbar: </para>
<para>bspw.: <code>https://zpub.localhost/</code> (Hostname wie bei <code>zpub-create-instance</code> (s.o.) angegeben)</para>
</listitem>
<listitem>
<para>zpub-Benutzer anlegen (hier: <code>test</code>):</para>
<para><code>htpasswd -b /var/lib/zpub/testzpublocal/settings/htpasswd test test</code></para>
</listitem>
<listitem>
<para>Datenverzeichnis anlegen</para>
</listitem>
<listitem>
<para>Datenverzeichnis mit Dokument-Verzeichnis(sen) füllen</para>
</listitem>
<listitem>
<para>svn: neues Dokumentverzeichnis dem SVN-Repository hinzufügen (<code>svn add</code>), Änderungen übertragen (<code>svn ci</code>)</para>
</listitem>
<listitem>
<para>zpub-Dokumente werden generiert und sind über das Webinterface, welche unter der oben definierten Domain läuft, abrufbar</para>
</listitem>
</orderedlist>

<note>
<itemizedlist>

<listitem>
<para>
<code>/var/lib/zpub/</code>  <symbol role="symbolfont">→</symbol> enthält ein Verzeichnis je instanz
</para>
</listitem>
<listitem>
<para>
<code>/var/lib/zpub/testzpublocal/conf/formats</code>  <symbol role="symbolfont">→</symbol>  Aktivierung/Deaktivierung der gewünschten Ausgabeformate
</para>
</listitem>
<listitem>
<para>
<code>/var/lib/zpub/testzpublocal/conf/default_style</code>   <symbol role="symbolfont">→</symbol>  Standard-Stil (z.B.
<code>draft</code>)
</para>
</listitem>
<listitem>
<para>
<code>/var/lib/zpub/testzpublocal/conf/final_style</code>  <symbol role="symbolfont">→</symbol>  Alternativ-Stil (z.b.
<code>final</code>)
</para>
</listitem>
</itemizedlist>
</note>


  </section>

  <section>    <title>Verzeichnisstruktur</title>

    <para>
      &zpub; erwartet eine bestimme Verzeichnisstruktur für seine Daten, seine
      Konfiguration, die Skripte und die Ausgabe. Es geht davon aus, dass all
      dies in <filename>/opt/zpub</filename> liegt. Neben den allgemeinen
      Verzeichnissen darin gibt es auch ein Verzeichnis pro Kunde, im
      folgenden exemplarisch <filename>/opt/zpub/&cust;</filename> benannt.
    </para>

    <variablelist>
      <title>&zpub;-Verzeichnisse</title>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/bin</filename>
	</term>
	<listitem><simpara>
	  ausführbare Skripte, etwa der SVN-Post-Commit-Hook, das
	  DocBook-Render-Skript oder das CGI-Skript.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/bin/lib</filename>
	</term>
	<listitem><simpara>
	  gemeinsam genutzte Programmteile, etwa Perl-Module
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/templates</filename>
	</term>
	<listitem><simpara>
	  Template-Toolkit-Vorlagen für das Web-Frontend und die
	  Benachrichtigungs-e-Mail
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/templates/static</filename>
	</term>
	<listitem><simpara>
	  Statische Dateien, etwa CSS-Style-Sheets, die unter
	  <filename>/static</filename> in das Web-Interface eingebunden
	  werden.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/tools</filename>
	</term>
	<listitem><simpara>
	  Werkzeuge, die weder selbst entwickelt wurden (und demnach
	  <filename>/opt/zpub/bin</filename> liegen), noch als Debian-Paket
	  zur Verfügungen stehen; etwa der Worttrenner für
	  <application>fop</application>.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/spool</filename>
	</term>
	<listitem><simpara>
	  In diesem Verzeichnis werden die Render-Aufträge verwaltet. Es gibt
	  die folgenden Unterverzeichnisse:
	  </simpara>
	  <simpara>In <filename>new/</filename> werden neue Aufträge, etwa nach
	  einem SVN-Commit, angelegt und dann nach <filename>todo/</filename>
	  verschoben. Der Spooler findet sie dort und schiebt sie nach
	  <filename>wip/</filename> (für „work in process“), während sie
	  bearbeitet und gelöst werden. Im Fehlerfalle werden sie nach
	  <filename>fail/</filename> verschoben.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/repos/zpub</filename>
	</term>
	<listitem><simpara>
	  enthält das SVN-Repository für alle nicht-benutzerspezifischen,
	  selbst entwickelten Dateien. Für den produktiven Betrieb wird dieses
	  nicht benötigt.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;</filename>
	</term>
	<listitem><simpara>
	  Verzeichnisbaum für alle benutzer-spezifischen Dateien, hier am
	  Beispiel &cust;.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/conf</filename>
	</term>
	<listitem><simpara>
	  Konfigurationsdateien, die der Benutzer nicht selbst bearbeiten
	  darf. Enthält neben der Apache-Konfiguration
	  <filename>apache2.conf</filename> auch verschiedene Dateien, die das
	  &zpub;-Verhalten selbst steuern. Diese sind weiter unten, in der
	  Liste „<xref linkend="zpub-settings"/>“ erklärt.

	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/settings</filename>
	</term>
	<listitem><simpara>
	  Konfigurationsdateien, die der Benutzer selbst einstellen darf,
	  etwa per Web-Frontend. Enthält neben der Apache-Benutzerdatenbank
	  <filename>htpasswd</filename> auch weitere Dateien, die das
	  &zpub;-Verhalten steuern. Diese sind weiter unten, in der Liste
	  „<xref linkend="zpub-settings"/>“ erklärt.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/style</filename>
	</term>
	<listitem><simpara>
	  Verfügbare Stylesheets, eines pro Unterverzeichnis. Es werden in
	  diesen die Dateien
	  <filename>fo.xsl</filename>, <filename>html.xsl</filename>, <filename>htmlhelp.xsl</filename>,
	  und gegebenenfalls das Verzeichnis <filename>images/</filename> erwartet.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/repos/style</filename>
	</term>
	<listitem><simpara>
	  Ein SVN-Repository, dass das oben genannte Verzeichnis verwaltet.
	  Für den produktiven Betrieb wird dieses nicht benötigt.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/repos/source</filename>
	</term>
	<listitem><simpara>
	  Das SVN-Repository mit den eigentlichen XML-Quellen der Dokumente.
	  Im Repository existiert für jedes Dokument ein Verzeichnis mit
	  <emphasis>genau einer</emphasis> XML-Datei. Weitere Dateien, wie etwa
	  Bilder, können in Unterverzeichnissen gespeichert sein.
	  Für den produktiven Betrieb wird dieses Repository direkt verwendet,
	  es gibt keine dauerhaft ausgecheckte Arbeitskopie.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/output</filename>
	</term>
	<listitem>
	  <simpara>
	  Hier werden die generierten Dokumente abgelegt. Es gibt ein
	  Unterverzeichnis pro Dokument, das wiederum das Verzeichnis
	  <filename>archive/</filename> enthält. Darin wird für jede
	  verfügbare Kombination aus SVN-Revisionsnummer und XSL-Stil ein
	  Verzeichnis angelegt. Diese können gefahrlos gelöscht werden, wenn
	  Festplattenspeicher frei gemacht werden soll. 
	  </simpara>
	  <simpara>
	  Auch gibt es, neben dem Verzeichnis <filename>archive/</filename>,
	  pro Dokument einen symbolischen Link <filename>latest</filename>, der
	  auf die jeweils aktuelle Revision zeigt. Er kann verwendet werden, um
	  geeignete Bookmarks zu setzen.
	  </simpara>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>/opt/zpub/&cust;/cache</filename>
	</term>
	<listitem>
	  <simpara>
	  In diesem Verzeichnis legt &zpub; diverse interne Dateien ab. Diese
	  müssen nicht von Hand bearbeitet werden, dürfen aber auch nicht
	  gelöscht werden.
	  </simpara>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      Wie bereits oben erwähnt wird &zpub; über die Dateien in den
      Verzeichnissen <filename>/opt/zpub/&cust;/conf</filename> und
      <filename>/opt/zpub/&cust;/settings</filename> gesteuert. Diese sind
      meist einfache Text-Dateien, die nur eine Wert speichern, seltener eine
      Liste von Werten, die dann in jeweils einer Zeile stehen.
    </para>
    <para>
      Manche Einstellungen, wie etwa
      <filename>/opt/zpub/&cust;/settings/final_rev/</filename>, sind
      dokumenten-spezifisch und sind selbst Verzeichnisse, die pro Dokument je eine wie das
      Dokument benannte Datei enthalten.
    </para>

    <variablelist id="zpub-settings">
      <title>&zpub;-Einstellungen</title>
      <varlistentry>
	<term>
	  <filename>conf/cust_name</filename>
	</term>
	<listitem><simpara>
	  Der Name des Kunden, in menschenlesbarer Schreibweise.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/logo.png</filename>
	</term>
	<listitem><simpara>
	  Ein Kunden-spezifisches Logo im PNG-Format, Auflösung 136×42 Pixel.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/hostname</filename>
	</term>
	<listitem><simpara>
	  (Optional) Der Name des virtuellen Hosts, standardmäßig &cust;.zpub.de.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/rootpath</filename>
	</term>
	<listitem><simpara>
	  (Optional) Der Pfad der URL der &zpub;-Instanz, wenn etwa mehrere
	  &zpub;-Instanzen auf einem virtuellen Host laufen sollen.
	  Standardmäßig leehr, das heißt dass &zpub; im Wurzelverzeichnis der
	  Website läuft. Die Variable sollte mit einem Slash beginnen, aber
	  ohne Slash enden, etwa „<filename>/zpub-instance</filename>“. Diese
	  Einstellung ist unabhängig von den Pfaden der Dateien im
	  Dateisystem!
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/admins</filename>
	</term>
	<listitem><simpara>
	  eine zeilenweise Aufzählung der Benutzer, die in der Web-Oberfläche
	  Admin-Rechte haben.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/features</filename>
	</term>
	<listitem><para>
	  Eine zeilenweise Aufzählung aller für diesen Kunden aktivieren Features.
	  Momentan definierte Features sind:
	  <!--
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term><literal>final_approve</literal></term>
	      <listitem><simpara>
		Ein Admin-Benutzter kann eine Revision eines
		Dokuments als final freigeben, dieses wird dann mit einem
		speziellen Stil erzeugt (etwa ohne den Vermerkt „draft“).
	      </simpara></listitem>
	    </varlistentry>
	  </variablelist>
	  -->
	  </para>
	  <itemizedlist>
	    <listitem><para>
	      <literal>final_approve</literal>:
	      Ein Admin-Benutzter kann eine Revision eines
	      Dokuments als final freigeben, dieses wird dann mit einem
	      speziellen Stil erzeugt (etwa ohne den Vermerkt „draft“).
	    </para></listitem>
	    <listitem><para>
	      <literal>online_backup</literal>:
	      Ein Admin-Benutzter kann auf der Status-Seite das komplette
	      Dokumenten-Quellarchiv als SVN-Dump herunterladen.
	    </para></listitem>
	  </itemizedlist>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/default_style</filename>
	</term>
	<listitem><simpara>
	  das standardmäßig zu verwendende XSLT-Stylesheet, spezifiziert über
	  den Verzeichnisnamen in
	  <filename>/opt/zpub/&cust;/style/</filename>.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/final_style</filename>
	</term>
	<listitem><simpara>
	  falls das Feature <literal>final_approve</literal> aktiv ist: Welcher
	  Stil für freigegebene Dokumente verwendet werden soll.
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>conf/formats</filename>
	</term>
	<listitem><simpara>
	  enthält eine Zeile pro Format (<literal>html</literal>,
	  <literal>pdf</literal> oder <literal>pdfhelp</literal>), in dem das
	  Dokument erstellt werden soll. (Ab version 0.2)
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>settings/final_rev/</filename>
	</term>
	<listitem><simpara>
	  falls das Feature <literal>final_approve</literal> aktiv ist:
	  Welche Revision des Dokuments die aktuell freigegebene ist.
	  (dokumenten-spezifisch)
	</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <filename>settings/subscribers/</filename>
	</term>
	<listitem>
	  <simpara>
	    Eine komma-separierte Liste der bei Änderungen am Dokument zu
	    benachrichtigenden Benutzer. (dokumenten-spezifisch)
	  </simpara>
	  <para>
	    Beispiel:
	  </para>
	  <para>
	    <literal>
	    Max Mustermann &lt;max.mustermann@web.de&gt;, Petra Musterfrau
	    &lt;petra@musterfrau.de&gt;
	    </literal>
	  </para>
	</listitem>
      </varlistentry>

    </variablelist>
  </section>

  <section>    <title>Zusammenspiel der Komponenten</title>

    <para>
      Die Skripte im Verzeichnis <filename>/opt/zpub/bin</filename> 
      führen jeweils spezifische Ausgaben aus, so dass im Zusammenspiel die
      gewünschte Funktionalität geboten wird. In diesem Kapitel wird der
      Programmablauf für verschiedene Anwendungsfälle beschreiben.
    </para>

    <section>
      <title>Erstellung einer neuen Dokumenten-Revsion</title>
      <para>
	Dieser Anwendungsfall beginnt auf dem Rechner des Redakteurs, der ein
	vorhandenes Dokument lokal bearbeitet oder ein neues anlegt. Mit seinem
	Subversion-Client überträgt er seine Änderung auf den zpub-Server. Nun
	gibt es eine neue Revision des Dokuments, die über die von SVN
	vergebenen Nummer identifiziert wird.
      </para>

      <para>
	SVN startet direkt nach dem Commit das Skript
	<filename>zpub-post-commit-hook.sh</filename>. Dieses untersucht die
	soeben gemachten Änderungen um herauszufinden, welche Dokumente
	bearbeitet wurden. Es ist natürlich möglich, mit einem SVN-Commit
	mehrere Dokumente zu ändern. Für jedes geänderte Dokumement legt es
	einen Auftrag in <filename>/opt/zpub/spool/todo</filename> an, welches
	Angaben zu
	<itemizedlist spacing="compact">
	  <listitem><simpara>Kunde</simpara></listitem>
	  <listitem><simpara>Dokument</simpara></listitem>
	  <listitem><simpara>Revision</simpara></listitem>
	  <listitem><simpara>zu verwendenter Stil</simpara></listitem>
	  <listitem><simpara>und Ausgabeverzeichnis</simpara></listitem>
	</itemizedlist>
	enthält. Dabei wird der zu verwendente Stil aus
	<filename>conf/default_style</filename> gelesen, und das
	Ausgabeverzeichnis in <filename>/opt/zpub/&cust;/output</filename> nach
	dem oben beschriebenen Schema erstellt.
      </para>

      <para>
	Außerdem aktualisiert <filename>zpub-post-commit-hook.sh</filename> die
	Datei <filename>/opt/zpub/&cust;/cache/documents</filename>, die die
	aktuell vorhandenen Dokumente aufzählt. Wird ein Dokument im
	SVN-Repository gelöscht, wird es darauf hin auch nicht mehr angezeigt.
	Die generierten Dokumente sind aber weiterhin vorhanden und müssen ggf.
	vom Systemadministrator gelöscht werden.
      </para>

      <para>
	Das Skript <filename>zpub-spooler.sh</filename>, welches permanent
	läuft, schaut regelmäßig in <filename>/opt/zpub/spool/todo</filename>
	nach neuen Aufträgen. Diese verschiebt es nacheinander nach
	<filename>/opt/zpub/spool/wip</filename> und ruft das Skript
	<filename>zpub-render.sh</filename> mit den Parametern aus der
	Auftrgs-Datei auf.
      </para>
      
      <para>
	Das Render-Skript erstellt darauf das Ausgabeverzeichnis, falls es nicht
	schon existiert. Es extrahiert die gewünschte Revision des Dokumentes
	aus dem SVN-Repository, legt eine symbolische Verknüpfung zu dem
	gewählten Dokumenten-Stil an und ruft, entsprechend der Konfiugration
	von <filename>conf/formats</filename>, die Skripte
	<filename>zpub-render-<replaceable>format</replaceable>.sh</filename>,
	welche die einzelnen Ausgabeformate bauen.
	Dabei kommt der <application>Microsoft HTML Help Workshop</application>
	zum Einsatz, sowie die Werkzeuge xslt und fop. Bei jeder Art von Fehler
	bricht dieses Skript ab.
      </para>

      <para>
	Je nach dem, ob das Render-Skript erfolgreich war oder nicht, wird die
	Auftragsdatei vom Spooler gelöscht oder nach
	<filename>/opt/zpub/spool/fail</filename> verschoben. Der Spooler ruft
	dann auch noch das Skript <filename>zpub-send-mail.pl</filename> auf,
	welches gegebenenfalls an die in <filename>settings/subscribers</filename>
	aufgeführten e-Mail-Adressen eine Benachrichtigung über die neue
	Revision schickt, sowie das Skript
	<filename>zpub-link-latest.pl</filename>, welches den oben erwähnten
	symbolischen Link anlegt. Danach wartet der Spooler wieder auf neue
	Aufträge.
      </para>

    </section>
  </section>
</article>
